import sys

def longest_substring(cmb_str):
    string_length = len(cmb_str)
    longest = (0, 0)
    
    def expand_center(start, left, right, string_length):
        while left >= 0 and right < string_length and start[left] == start[right]:
            left -= 1
            right += 1
        return left + 1, right

    for i in range(string_length):
        odd_left, odd_right = expand_center(cmb_str, i, i, string_length)
        if odd_right - odd_left > longest[1] - longest[0]:
            longest = (odd_left, odd_right)

        even_left, even_right = expand_center(cmb_str, i, i + 1, string_length)
        if even_right - even_left > longest[1] - longest[0]:
            longest = (even_left, even_right)

    return cmb_str[longest[0]:longest[1]]

    
def main(lines):
    # このコードは標準入力と標準出力を用いたサンプルコードです。
    # このコードは好きなように編集・削除してもらって構いません。
    # ---
    # This is a sample code to use stdin and stdout.
    # Edit and remove this code as you like.

    combined_string = ''.join(lines)
    print(longest_substring(combined_string))

if __name__ == '__main__':
    lines = []
    for l in sys.stdin:
        lines.append(l.rstrip('\r\n'))
    main(lines)



longest_substring(cmb_str) 関数は、与えられた文字列 cmb_str から最長の回文部分文字列を見つけて返します。
string_length は文字列 cmb_str の長さを保持します。
longest は現在見つかっている最長回文部分文字列の開始位置と終了位置（終了位置自体は含まれない）をタプルで記録します。
expand_center 関数は、与えられた中心から左右に向かって回文を探すための内部関数です。

メインのループでは：
for i in range(string_length) で文字列 cmb_str の各文字を回文の中心位置として順番に試します。
odd_left, odd_right = expand_center(cmb_str, i, i, string_length) は、奇数長の回文を探します。
even_left, even_right = expand_center(cmb_str, i, i + 1, string_length) は、偶数長の回文を探します。
各中心位置で、もし見つかった回文の長さが現在の longest に記録されている回文よりも長ければ、longest を更新します。

最終的に、関数は cmb_str[longest[0]:longest[1]] を返し、最長の回文部分文字列を取得します。


### 最適化の方向
最後に、時間が足りず最適化を完了できなかった点についてのコメントです。

奇数または偶数の計算を省略する：これにより、現在の最長の回文の長さを利用して、不必要な中心位置の探索を減らすことができます。これにより計算量を削減できます。

最長の回文の長さから探索する：これにより、毎回すべての可能な回文の中心位置を試すのではなく、最初に見つかった最長の回文の長さを基準にして、それを中心にさらに回文であるかどうかを確認することで、計算を効率化できます。

これらの最適化は、特に入力文字列が大きい場合に明らかな性能の向上をもたらす可能性があります。